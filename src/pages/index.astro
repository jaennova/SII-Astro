---
// src/pages/index.astro
import Layout from "../layouts/Layout.astro";
import ProductCard from "../components/ProductCard.astro";
import { getProducts } from "../lib/db";

const products = await getProducts();
---

<Layout title="Tienda Online">
  <main class="min-h-screen bg-gray-100">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <div class="text-center mb-12">
        <h1 class="text-4xl font-bold text-gray-900 mb-4">Tienda Online</h1>
      </div>
      <div id="cart-summary" class="bg-white rounded-lg"></div>
      <hr />

      <div class="lg:grid lg:grid-cols-4 lg:gap-8">
        {/* Grid de productos - ocupa 3 columnas en desktop */}
        <div class="lg:col-span-3">
          <div
            class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8"
          >
            {products.map((product) => <ProductCard {...product} />)}
          </div>
        </div>

        {/* Resumen de compra - ocupa 1 columna en desktop */}
        <div class="lg:col-span-1">
          <div class="sticky top-6">
            <div id="cart-summary" class="bg-white rounded-lg shadow-md p-6">
              <h2 class="text-xl font-semibold mb-4">Resumen de Compra</h2>
              <div class="flex justify-between">
                <button
                  id="clear-cart"
                  class="text-red-500 hover:text-red-700 text-sm"
                  onclick="clearCart()"
                >
                  Vaciar carrito
                </button>
                <button
                  id="open-modal"
                  class="bg-primary-600 text-white px-1 py-2 rounded hover:bg-primary-700"
                >
                  Crear Producto
                </button>
              </div>
              <!-- Modal Form -->
              <div
                id="product-modal"
                class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full"
              >
                <div
                  class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white"
                >
                  <div class="mt-3">
                    <h3
                      class="text-lg font-medium leading-6 text-gray-900 mb-4"
                    >
                      Crear Nuevo Producto
                    </h3>
                    <form id="product-form" class="space-y-4">
                      <div>
                        <label class="block text-sm font-medium text-gray-700"
                          >Nombre</label
                        >
                        <input
                          type="text"
                          id="nombre"
                          required
                          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                        />
                      </div>
                      <div>
                        <label class="block text-sm font-medium text-gray-700"
                          >Precio</label
                        >
                        <input
                          type="number"
                          id="precio"
                          step="0.01"
                          required
                          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                        />
                      </div>
                      <div class="flex justify-end gap-3">
                        <button
                          type="button"
                          id="close-modal"
                          class="bg-gray-200 px-4 py-2 rounded hover:bg-gray-300"
                        >
                          Cancelar
                        </button>
                        <button
                          type="submit"
                          class="bg-primary-600 text-white px-4 py-2 rounded hover:bg-primary-700"
                        >
                          Guardar
                        </button>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
              <div id="cart-items"></div>
              <div class="mt-4 pt-4 border-t">
                <div class="flex justify-between">
                  <span>Subtotal:</span>
                  <span id="subtotal">$0.00</span>
                </div>
                <div class="flex justify-between">
                  <span>IVA (16%):</span>
                  <span id="iva">$0.00</span>
                </div>
                <div class="flex justify-between font-bold mt-2">
                  <span>Total:</span>
                  <span id="total">$0.00</span>
                </div>
                <button
                  id="checkout-button"
                  class="w-full mt-4 bg-primary-600 text-white px-6 py-3 rounded-lg hover:bg-primary-700"
                >
                  Proceder al Pago
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script define:vars={{ products }}>
  // Inicializar el carrito desde localStorage o como objeto vacío
  let cart = JSON.parse(localStorage.getItem("cart") || "{}");

  function updateCartUI() {
    const cartItems = document.getElementById("cart-items");
    const subtotalElement = document.getElementById("subtotal");
    const ivaElement = document.getElementById("iva");
    const totalElement = document.getElementById("total");

    if (!cartItems || !subtotalElement || !ivaElement || !totalElement) return;

    let subtotal = 0;
    cartItems.innerHTML = "";

    Object.entries(cart).forEach(([id, cantidad]) => {
      const product = products.find((p) => p.id === Number(id));
      if (product) {
        subtotal += product.precio * Number(cantidad);
        cartItems.innerHTML += `
          <div class="flex justify-between items-center mb-2">
            <div class="flex items-center">
              <span>${product.nombre} x ${cantidad}</span>
              <button 
                class="ml-2 text-red-500 hover:text-red-700"
                onclick="removeFromCart(${id})"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                </svg>
              </button>
            </div>
            <span>$${(product.precio * Number(cantidad)).toFixed(2)}</span>
          </div>
        `;
      }
    });

    const iva = subtotal * 0.16;
    const total = subtotal + iva;

    subtotalElement.textContent = `$${subtotal.toFixed(2)}`;
    ivaElement.textContent = `$${iva.toFixed(2)}`;
    totalElement.textContent = `$${total.toFixed(2)}`;

    // Guardar el carrito en localStorage
    localStorage.setItem("cart", JSON.stringify(cart));
  }

  // Función para eliminar productos del carrito
  window.removeFromCart = function (productId) {
    if (cart[productId]) {
      delete cart[productId];
      updateCartUI();
    }
  };

  // Escuchar el evento addToCart
  window.addEventListener("addToCart", function (event) {
    if (event && "detail" in event) {
      const detail = event.detail;
      if (detail && "id" in detail && "cantidad" in detail) {
        const id = Number(detail.id);
        const cantidad = Number(detail.cantidad);

        if (!isNaN(id) && !isNaN(cantidad)) {
          cart[id] = (cart[id] || 0) + cantidad;
          updateCartUI();
        }
      }
    }
  });

  // Configurar el botón de checkout
  const checkoutButton = document.getElementById("checkout-button");
  if (checkoutButton) {
    checkoutButton.addEventListener("click", function () {
      if (Object.keys(cart).length === 0) {
        alert("El carrito está vacío");
        return;
      }
      window.location.href = `/factura?cart=${encodeURIComponent(JSON.stringify(cart))}`;
    });
  }
  // Función para vaciar el carrito completo
  window.clearCart = function () {
    if (Object.keys(cart).length === 0) {
      alert("El carrito ya está vacío");
      return;
    }

    if (confirm("¿Estás seguro de que deseas vaciar el carrito?")) {
      cart = {};
      localStorage.removeItem("cart");
      updateCartUI();
    }
  };
  // Cargar el carrito inicial
  updateCartUI();
</script>
<script>
  // Modal handling
  const modal = document.getElementById("product-modal");
  const openModal = document.getElementById("open-modal");
  const closeModal = document.getElementById("close-modal");
  const productForm = document.getElementById("product-form");

  openModal?.addEventListener("click", () => {
    modal?.classList.remove("hidden");
  });

  closeModal?.addEventListener("click", () => {
    modal?.classList.add("hidden");
  });

  // Form submission
  productForm?.addEventListener("submit", async (e) => {
    e.preventDefault();

    const nombreInput = document.getElementById("nombre") as HTMLInputElement;
    const precioInput = document.getElementById("precio") as HTMLInputElement;

    const newProduct = {
      nombre: nombreInput.value,
      precio: parseFloat(precioInput.value),
      descripcion: new Date().toLocaleDateString(),
      imagen_url: "https://via.placeholder.com/300", // imagen por defecto
    };

    try {
      const response = await fetch("/api/products", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(newProduct),
      });

      if (response.ok) {
        // Recargar la página para mostrar el nuevo producto
        window.location.reload();
      } else {
        alert("Error al crear el producto");
      }
    } catch (error) {
      console.error("Error:", error);
      alert("Error al crear el producto");
    }
  });
</script>
